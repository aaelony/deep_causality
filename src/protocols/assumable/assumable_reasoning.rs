/*
 * Copyright (c) 2023. Marvin Hansen <marvin.hansen@gmail.com> All rights reserved.
 */
use crate::prelude::{Assumable, NumericalValue};

pub trait AssumableReasoning<T>
    where
        T: Assumable + Clone,
{
    // Method can be generated by the compiler using macros.
    fn len(&self) -> usize;
    fn get_all_items(&self) -> Vec<&T>;
    // Default implementations for all other methods are provided below.

    fn all_assumptions_tested(&self) -> bool
    {
        for elem in self.get_all_items() {
            if !elem.assumption_tested() {
                return false;
            }
        }
        true
    }

    fn all_assumptions_valid(&self) -> bool
    {
        for a in self.get_all_items() {
            if !a.assumption_valid() {
                return false;
            }
        }
        true
    }

    fn number_assumption_valid(&self) -> NumericalValue
    {
        self.get_all_items()
            .iter()
            .filter(|a| a.assumption_valid())
            .count() as NumericalValue
    }

    fn percent_assumption_valid(&self) -> NumericalValue
    {
        let total = self.len() as NumericalValue;
        let count = self.number_assumption_valid();
        (count / total) * 100.0
    }

    fn verify_all_assumptions(&self, data: &[NumericalValue])
    {
        for a in self.get_all_items() {
            a.verify_assumption(data);
        }
    }

    fn get_all_invalid_assumptions(&self) -> Vec<&T>
    {
        self.get_all_items()
            .into_iter()
            .filter(|a| !a.assumption_valid())
            .collect()
    }

    fn get_all_valid_assumptions(&self) -> Vec<&T>
    {
        self.get_all_items()
            .into_iter()
            .filter(|a| a.assumption_valid())
            .collect()
    }

    fn get_all_tested_assumptions(&self) -> Vec<&T>
    {
        self.get_all_items()
            .into_iter()
            .filter(|a| a.assumption_tested())
            .collect()
    }

    fn get_all_untested_assumptions(&self) -> Vec<&T>
    {
        self.get_all_items()
            .into_iter()
            .filter(|a| !a.assumption_tested())
            .collect()
    }
}
